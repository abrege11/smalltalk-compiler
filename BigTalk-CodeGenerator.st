Object subclass: #BigTalkCodeGenerator	instanceVariableNames: 'stream indentLevel'	classVariableNames: ''	poolDictionaries: ''	category: 'BigTalk-CodeGenerator'!!BigTalkCodeGenerator methodsFor: 'initialize-release' stamp: 'jws 11/18/2024 11:39'!initialize	super initialize.	stream := WriteStream on: ''.	indentLevel := 0.! !!BigTalkCodeGenerator methodsFor: 'formatting' stamp: 'ab 12/4/2024 11:23'!escapeQuotes: aString	| writer reader |	reader := aString readStream.	writer := WriteStream on: String new.	[reader atEnd]		whileFalse:			[| nextChar |			nextChar := reader next.			nextChar = $" ifTrue: [writer nextPut: nextChar].			writer nextPut: nextChar].	^writer contents! !!BigTalkCodeGenerator methodsFor: 'formatting' stamp: 'ab 12/4/2024 10:58'!indent	stream tab: self indentLevel! !!BigTalkCodeGenerator methodsFor: 'formatting' stamp: 'jws 11/18/2024 11:47'!lf		stream lf! !!BigTalkCodeGenerator methodsFor: 'formatting' stamp: 'ab 12/4/2024 10:58'!tabIn	indentLevel := indentLevel + 1! !!BigTalkCodeGenerator methodsFor: 'formatting' stamp: 'ab 12/4/2024 11:17'!tabOut	indentLevel := indentLevel - 1! !!BigTalkCodeGenerator methodsFor: 'accessing' stamp: 'jws 11/22/2024 11:34'!indentLevel	^ indentLevel! !!BigTalkCodeGenerator methodsFor: 'accessing' stamp: 'jws 11/22/2024 11:34'!indentLevel: anObject	indentLevel := anObject.! !!BigTalkCodeGenerator methodsFor: 'accessing' stamp: 'jws 11/22/2024 11:34'!stream	^ stream! !!BigTalkCodeGenerator methodsFor: 'accessing' stamp: 'jws 11/22/2024 11:34'!stream: anObject	stream := anObject.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/4/2024 11:18'!visitBTArgumentList: aBTArgumentList 		stream nextPutAll: '('.	aBTArgumentList arguments		do: [:each | each accept: self]		separatedBy: [stream nextPutAll: ', '].	stream nextPutAll: ')'! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/6/2024 11:30'!visitBTArithmeticOperator: aBTArithmeticOperator 		(aBTArithmeticOperator opSymbol asString = 'MOD')		ifTrue: [ stream nextPutAll: '%']		ifFalse: [ stream nextPutAll: aBTArithmeticOperator opSymbol].! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/4/2024 11:17'!visitBTAssignmentStatement: aBTAssignmentStatement 		stream 		nextPutAll: aBTAssignmentStatement variableId;		nextPutAll: ' =  '.	aBTAssignmentStatement expression accept: self.	stream 		nextPutAll: ';';		lf.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/4/2024 11:07'!visitBTBinaryExpression: aBTBinaryExpression 		aBTBinaryExpression arg1 accept: self.	aBTBinaryExpression operator accept: self.	aBTBinaryExpression arg2 accept: self.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/4/2024 11:26'!visitBTCompoundStatement: aBTCompoundStatement 		stream lf.	aBTCompoundStatement statements		do: [:each | each accept: self]		separatedBy: [self lf; indent].	self tabOut.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/4/2024 11:50'!visitBTFunction: aBTFunction 		aBTFunction returnType accept: self.	stream 		nextPutAll: ' _';		nextPutAll: aBTFunction identifier.	aBTFunction parameters accept: self.	stream 		nextPutAll: '{'; 		lf.	self tabIn; indent.	aBTFunction returnType accept: self.	stream		space;		nextPutAll: aBTFunction identifier;		nextPutAll: ';';		lf.	self indent.	aBTFunction methodBody accept: self.	stream 		nextPutAll: 'return ';		nextPutAll: aBTFunction identifier;		nextPutAll: ';';		nextPutAll: '}'; 		lf.	! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/4/2024 11:28'!visitBTFunctionCall: aBTFunctionCall 		stream 		nextPutAll: '_';		nextPutAll: aBTFunctionCall identifier.	aBTFunctionCall arguments accept: self! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/6/2024 11:19'!visitBTGroupedExpression: aBTGroupedExpression 		stream nextPutAll: '('.	aBTGroupedExpression expression accept: self.	stream nextPutAll: ')'.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/4/2024 11:36'!visitBTIfThenElseStatement: aBTIfThenElseStatement 		stream nextPutAll: 'if('.	aBTIfThenElseStatement expression accept: self.	stream nextPutAll: '){'.	self lf; tabIn; indent.	aBTIfThenElseStatement trueStatement accept: self.	self lf; tabOut; indent.	stream nextPutAll: '} else {'.	self lf; tabIn; indent.	aBTIfThenElseStatement falseStatement accept: self.	self tabOut; indent.	stream nextPutAll: '}'.	self tabOut! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/6/2024 11:17'!visitBTIfThenStatement: aBTIfThenElseStatement 		stream nextPutAll: 'if('.	aBTIfThenElseStatement expression accept: self.	stream nextPutAll: '){'.	self lf; tabIn; indent.	aBTIfThenElseStatement trueStatement accept: self.	self lf; tabOut; indent.	stream nextPutAll: '}'.	self tabOut! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/3/2024 11:01'!visitBTIntegerType: aBTIntegerType 		stream nextPutAll: 'int'! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/6/2024 11:28'!visitBTLogicalOperator: aBTLogicalOperator 		(aBTLogicalOperator opSymbol asString = 'AND')		ifTrue: [ stream nextPutAll: '&&'].	(aBTLogicalOperator opSymbol asString = 'OR')		ifTrue: [ stream nextPutAll: '||'].! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/4/2024 11:50'!visitBTMethodBody: aBTMethodBody 		aBTMethodBody variables accept: self.	self lf; indent.	aBTMethodBody statement accept: self.	self lf. "Cascade expected ->"! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/3/2024 11:06'!visitBTMethods: aBTMethods 	stream nextPutAll: '// methods'; lf.	aBTMethods declarations		do: [:each | each accept: self]! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/4/2024 10:55'!visitBTParameterList: aBTParameterList 		stream nextPutAll: '('.	aBTParameterList parameters		do: [:each | each accept: self]		separatedBy: [stream nextPutAll: ', '].	stream nextPutAll: ')'! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/6/2024 11:35'!visitBTProcedure: aBTProcedure		stream 		nextPutAll: 'void _';		nextPutAll: aBTProcedure identifier.	aBTProcedure parameters accept: self.	stream 		nextPutAll: '{'; 		lf.	self tabIn; indent.	aBTProcedure methodBody accept: self.	stream 		nextPutAll: '}'; 		lf.	! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/6/2024 11:36'!visitBTProcedureCall: aBTProcedureCall 		stream nextPutAll: aBTProcedureCall identifier.	aBTProcedureCall arguments accept: self.	stream nextPutAll: ';'.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/2/2024 11:43'!visitBTProgram: aBTProgram 	stream nextPutAll: '#include <stdio.h>;'; lf.	aBTProgram variables accept: self.	aBTProgram methods accept: self.	stream		nextPutAll: '// Program'; lf;		nextPutAll: 'int main(int argc, char *argv[]){'; lf.	aBTProgram statement accept: self.	stream nextPutAll: '}'! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/4/2024 11:09'!visitBTRelationalOperator: aBTRelationalOperator 		stream space; nextPutAll: aBTRelationalOperator opSymbol; space! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/2/2024 15:45'!visitBTStringType: aBTStringType 		stream nextPutAll: 'char *'! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/6/2024 11:19'!visitBTUnaryExpression: aBTUnaryExpression 		self stream nextPutAll: '!!'.	aBTUnaryExpression expression accept: self.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/4/2024 11:15'!visitBTVariableDeclaration: aBTVariableDeclaration 		aBTVariableDeclaration type accept: self.	stream 		space;		nextPutAll: aBTVariableDeclaration name.	! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/4/2024 11:08'!visitBTVariableReference: aBTVariableReference 		stream nextPutAll: aBTVariableReference identifier! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/4/2024 10:51'!visitBTVariables: aBTVariables 		stream nextPutAll: '// variables'; lf.	aBTVariables declarations		do: [:each | each accept: self].	stream lf.! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/6/2024 11:34'!visitBTWhileStatement: aBTWhileStatement 		stream nextPutAll: 'while ('.	aBTWhileStatement expression accept: self.	stream nextPutAll: ') {'.	self lf; tabIn; indent.	aBTWhileStatement statement accept: self.	self tabOut	stream nextPutAll: '}'! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/4/2024 11:25'!visitBTWriteLine: aBTWriteLine 		stream nextPutAll: 'printf("\n");'! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/6/2024 11:24'!visitBTliteralBoolean: aBTliteralBoolean 		(aBTliteralBoolean value asString = 'true')		ifTrue: [stream nextPutAll: '1']		ifFalse: [stream nextPutAll: '0']! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/4/2024 11:10'!visitBTliteralInteger: aBTliteralInteger 		stream nextPutAll: aBTliteralInteger value printString! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/4/2024 11:10'!visitBTliteralString: aBTliteralString 		stream		nextPut: $";		nextPutAll: (self escapeQuotes: aBTliteralString value);		nextPut: $"! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/6/2024 11:15'!visitWriteBoolean: aBTWriteBoolean	stream nextPutAll: 'printf("%s", '.	aBTWriteBoolean expression accept: self.	stream nextPutAll: ' ? "true": "false");'.	! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/4/2024 11:24'!visitWriteInteger: aBTWriteInteger	stream nextPutAll: 'printf("%d", '.	aBTWriteInteger expression accept: self.	stream nextPutAll: ');'.	! !!BigTalkCodeGenerator methodsFor: 'visiting' stamp: 'ab 12/6/2024 11:14'!visitWriteString: aBTWriteString	stream nextPutAll: 'printf("%s", '.	aBTWriteString expression accept: self.	stream nextPutAll: ');'.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BigTalkCodeGenerator class	instanceVariableNames: ''!!BigTalkCodeGenerator class methodsFor: 'code generating' stamp: 'jws 11/18/2024 11:40'!generate: aProgramString	| generator ast |	generator := self new.	ast := BigTalkParser parse: aProgramString.	ast accept: generator.	^generator stream contents! !TestCase subclass: #BigTalkCodeGeneratorTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'BigTalk-CodeGenerator'!!BigTalkCodeGeneratorTestCase methodsFor: 'running' stamp: 'ab 12/2/2024 15:34'!testFactorialProgram	| formattedCode |	formattedCode := BigTalkCodeGenerator generate: self factorialProgram.	formattedCode inspect! !!BigTalkCodeGeneratorTestCase methodsFor: 'running' stamp: 'jws 11/22/2024 11:32'!testFormatNanoProgram	| formattedCode |	formattedCode := BigTalkCodeGenerator generate: self nanoProgram.	formattedCode inspect! !!BigTalkCodeGeneratorTestCase methodsFor: 'running' stamp: 'ab 12/6/2024 11:08'!testNanoBooleanProgram	| formattedCode |	formattedCode := BigTalkCodeGenerator generate: self nanoBooleanProgram.	formattedCode inspect! !!BigTalkCodeGeneratorTestCase methodsFor: 'running' stamp: 'ab 12/6/2024 11:08'!testOperatorProgram	| formattedCode |	formattedCode := BigTalkCodeGenerator generate: self operatorProgram.	formattedCode inspect! !!BigTalkCodeGeneratorTestCase methodsFor: 'running' stamp: 'ab 12/6/2024 11:02'!testProcedureProgram	| formattedCode |	formattedCode := BigTalkCodeGenerator generate: self procedureProgram.	formattedCode inspect! !!BigTalkCodeGeneratorTestCase methodsFor: 'accessing' stamp: 'ab 12/2/2024 15:34'!factorialProgram	^'program	variables		msg : string	methods		function factorial(n:integer) : integer		do			if n = 0 then				factorial <- 1			else				factorial <- n * factorial( n - 1 )	do		[msg <- "Factorial 5 is "		writeString msg		writeInteger factorial(5)		writeLine]'! !!BigTalkCodeGeneratorTestCase methodsFor: 'accessing' stamp: 'ab 12/6/2024 11:08'!nanoBooleanProgram	^'program do writeBoolean true'! !!BigTalkCodeGeneratorTestCase methodsFor: 'accessing' stamp: 'jws 12/2/2024 11:35'!nanoProgram	^'programdo	writeString "Hello, World!!"' withUnixLineEndings! !!BigTalkCodeGeneratorTestCase methodsFor: 'accessing' stamp: 'ab 12/6/2024 11:07'!operatorProgram	^'program	do		if (9 > 7) AND (NOT (true = false)) OR ("hello" < "abc") then			writeInteger (((7 + 3)*(8 - 2)) MOD 7) / 2'! !!BigTalkCodeGeneratorTestCase methodsFor: 'accessing' stamp: 'ab 12/6/2024 11:02'!procedureProgram	^'program	methods    		procedure sayHello()    		do        		writeString "Hello, World!!"        		procedure countdown(count:integer, message:string)    		variables         		counter:integer    		do        		[counter <- count            	while counter > 0 do	            	[counter <- counter - 1                		writeInteger counter]            	writeString message            	writeLine]           	do		[sayHello()		countdown(10, "Blastoff!!")]'! !