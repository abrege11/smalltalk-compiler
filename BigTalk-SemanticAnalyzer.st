Object subclass: #BigTalkSemanticAnalyzer	instanceVariableNames: 'env errors'	classVariableNames: ''	poolDictionaries: ''	category: 'BigTalk-SemanticAnalyzer'!!BigTalkSemanticAnalyzer methodsFor: 'initialize-release' stamp: 'jws 12/2/2024 11:14'!initialize	super initialize.	env := BTEnvironment new.	errors := OrderedCollection new.! !!BigTalkSemanticAnalyzer methodsFor: 'accessing' stamp: 'jws 12/2/2024 11:13'!env	^ env! !!BigTalkSemanticAnalyzer methodsFor: 'accessing' stamp: 'jws 12/2/2024 11:13'!env: anObject	env := anObject.! !!BigTalkSemanticAnalyzer methodsFor: 'accessing' stamp: 'jws 12/2/2024 11:13'!errors	^ errors! !!BigTalkSemanticAnalyzer methodsFor: 'accessing' stamp: 'jws 12/2/2024 11:13'!errors: anObject	errors := anObject.! !!BigTalkSemanticAnalyzer methodsFor: 'utility' stamp: 'ab 12/7/2024 17:20'!apply: args to: params 		| argStream paramStream |	argStream := ReadStream on: args.	paramStream := ReadStream on: params.	[argStream atEnd]		whileFalse:			[paramStream next set: argStream next].	argStream atEnd ifFalse: (BTArityError signal: 'incorrect num of arguments').	paramStream atEnd ifFalse: (BTArityError signal: 'incorrect num of arguments').! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'ab 12/7/2024 15:40'!visitBTArgumentList: aBTArgumentList 		[^aBTArgumentList arguments		collect: [:each | each accept: self]]		on: BTError		do: [:ex | errors add: ex].! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'ab 12/7/2024 16:30'!visitBTArithmeticOperator: aBTArithmeticOperator 		| opSelector |	opSelector := aBTArithmeticOperator opSymbol.	opSelector = #/ ifTrue: [opSelector := #//].	opSelector = #MOD ifTrue: [opSelector := #\\].	^opSelector asSymbol		! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'ab 12/7/2024 15:22'!visitBTAssignmentStatement: aBTAssignmentStatement 		[| var value |	var := env variable: aBTAssignmentStatement variableId.	value := aBTAssignmentStatement expression accept: self.	var set: value.]		on: BTError		do: [:ex | errors add: ex].! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'ab 12/7/2024 17:08'!visitBTBinaryExpression: aBTBinaryExpression 		| arg1 arg2 |	arg1 := aBTBinaryExpression arg1 accept: self.	arg2 := aBTBinaryExpression arg2 accept: self.		[aBTBinaryExpression operator checkArg1: arg1 arg2: arg2.]		on: BTError		do: [:ex | errors add: ex].	^aBTBinaryExpression operator ! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'ab 12/7/2024 14:24'!visitBTCompoundStatement: aBTCompoundStatement 		aBTCompoundStatement statements		do: [:each | each accept: self]! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'ab 12/7/2024 15:36'!visitBTFunction: aBTFunction 		[env		declare: aBTFunction identifier		method: aBTFunction]		on: BTError		do: [:ex | errors add: ex].! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'ab 12/7/2024 15:38'!visitBTFunctionCall: aBTFunctionCall 		[| funcName func args params result |	funcName := aBTFunctionCall identifier.	func := env method: funcName.	args := aBTFunctionCall arguments accept: self.	env activate.	params := func parameters accept: self.	self apply: args to: params.	env declare: funcName variable: (BTVariable type: func returnType).	func methodBody accept: self.	result := env variable: funcName.	env deactivate.	^result get]		on: BTError		do: [:ex | errors add: ex].! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'ab 12/7/2024 16:18'!visitBTIfThenElseStatement: aBTIfThenElseStatement 		[(aBTIfThenElseStatement expression accept: self)]		on: BTError		do: [:ex | errors add: ex]. 				[aBTIfThenElseStatement trueStatement accept: self]			on: BTError			do: [:ex | errors add: ex]. 					[aBTIfThenElseStatement falseStatement accept: self]			on: BTError			do: [:ex | errors add: ex]. ! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'ab 12/7/2024 16:17'!visitBTIfThenStatement: aBTIfThenStatement 		[BTBooleanType default checkType: (aBTIfThenStatement expression accept: self)]		on: BTError		do: [:ex | errors add: ex]. 				[aBTIfThenStatement trueStatement accept: self]			on: BTError			do: [:ex | errors add: ex]. ! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'ab 12/7/2024 15:45'!visitBTMethodBody: aBTMethodBody 	aBTMethodBody variables accept: self.	aBTMethodBody statement accept: self.! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jws 12/2/2024 11:22'!visitBTMethods: aBTMethods 	aBTMethods declarations		do: [:each | each accept: self]! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'ab 12/7/2024 15:42'!visitBTParameterList: aBTParameterList 		[^aBTParameterList parameters		collect: [:each | each accept: self]]		on: BTError		do: [:ex | errors add: ex].! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'ab 12/7/2024 14:53'!visitBTProcedure: aBTProcedure 	[env		declare: aBTProcedure identifier		method: aBTProcedure]			on: BTError			do: [:ex | self errors add:ex].! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'ab 12/7/2024 15:30'!visitBTProcedureCall: aBTProcedureCall 	[| procName proc args params |	procName := aBTProcedureCall identifier.	proc := env method: procName.	args := aBTProcedureCall arguments accept: self.	env activate.	params := proc parameters accept: self.	self apply: args to: params.	proc methodBody accept: self.	env deactivate.]		on: BTError		do: [:ex | errors add: ex].! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jws 12/2/2024 11:21'!visitBTProgram: aBTProgram 		aBTProgram variables accept: self.	aBTProgram methods accept: self.	aBTProgram statement accept: self.! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'ab 12/7/2024 15:49'!visitBTRelationalOperator: aBTRelationalOperator 		^aBTRelationalOperator opSymbol! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'ab 12/7/2024 14:23'!visitBTVariableDeclaration: aBTVariableDeclaration 	| var |	var := BTVariable type: aBTVariableDeclaration type.	[env 		declare: aBTVariableDeclaration name 		variable: var]			on: BTError			do: [:ex | errors add:ex].	^var	! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'ab 12/7/2024 15:23'!visitBTVariableReference: aBTVariableReference 		^(env variable: aBTVariableReference identifier) get! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jws 12/2/2024 11:22'!visitBTVariables: aBTVariables 	aBTVariables declarations		do: [:each | each accept: self]! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'ab 12/7/2024 16:26'!visitBTWhileStatement: aBTWhileStatement 	[BTBooleanType default checkType: (aBTWhileStatement expression accept: self)]		on: BTError		do: [:ex | errors add: ex]. 				[aBTWhileStatement statement accept: self]			on: BTError			do: [:ex | errors add: ex]. ! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'ab 12/7/2024 14:31'!visitBTWriteLine: aBTWriteLine 		Transcript cr! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'ab 12/7/2024 14:32'!visitBTliteralBoolean: aBTliteralBoolean 		^aBTliteralBoolean value! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jws 12/2/2024 11:29'!visitBTliteralInteger: aBTliteralInteger 		^BTIntegerType default anyValue! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jws 12/2/2024 11:27'!visitBTliteralString: aBTliteralString 		^BTStringType default anyValue! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'ab 12/7/2024 16:20'!visitWriteBoolean: aBTWriteBoolean 		[BTBooleanType default checkType: (aBTWriteBoolean expression accept: self)]		on: BTError		do: [:ex | self errors add: ex]! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'ab 12/7/2024 16:02'!visitWriteInteger: aBTWriteInteger 		[BTIntegerType default checkType: (aBTWriteInteger expression accept: self)]		on: BTError		do: [:ex | self errors add: ex].! !!BigTalkSemanticAnalyzer methodsFor: 'visiting' stamp: 'jws 12/2/2024 11:32'!visitWriteString: aBTWriteString 		[BTStringType default checkType: (aBTWriteString expression accept: self)]		on: BTError		do: [:ex | self errors add: ex]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BigTalkSemanticAnalyzer class	instanceVariableNames: ''!!BigTalkSemanticAnalyzer class methodsFor: 'analyzing' stamp: 'jws 12/2/2024 11:16'!analyze: aProgramString	| ast analyzer |	ast := BigTalkParser parse: aProgramString.	analyzer := self new.	ast accept: analyzer.	^analyzer errors! !TestCase subclass: #BigTalkSemanticAnalyzerTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'BigTalk-SemanticAnalyzer'!!BigTalkSemanticAnalyzerTestCase methodsFor: 'running' stamp: 'ab 12/7/2024 16:27'!testBadArithmeticProgram	| errors |	errors := BigTalkSemanticAnalyzer analyze: self badArithmeticProgram.	self deny: errors isEmpty.	errors inspect.! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'running' stamp: 'ab 12/7/2024 15:06'!testBadFunctionCall	| errors |	errors := BigTalkSemanticAnalyzer analyze: self badFunctionCall.	self deny: errors isEmpty.	errors inspect.! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'running' stamp: 'ab 12/7/2024 15:54'!testBadIf	| errors |	errors := BigTalkSemanticAnalyzer analyze: self badIf.	self deny: errors isEmpty.	errors inspect.! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'running' stamp: 'jws 12/2/2024 11:29'!testBadNano	| errors |	errors := BigTalkSemanticAnalyzer analyze: self nanoBadProgram.	self deny: errors isEmpty.! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'running' stamp: 'ab 12/7/2024 14:30'!testBadVariablesProgram	| errors |	errors := BigTalkSemanticAnalyzer analyze: self badVariablesProgram.	self deny: errors isEmpty.	errors inspect.! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'running' stamp: 'ab 12/7/2024 16:24'!testBadWhile	| errors |	errors := BigTalkSemanticAnalyzer analyze: self badWhile.	self deny: errors isEmpty.	errors inspect.! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'running' stamp: 'ab 12/7/2024 15:32'!testIncorrectType	| errors |	errors := BigTalkSemanticAnalyzer analyze: self incorrectType.	self deny: errors isEmpty.	errors inspect.! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'running' stamp: 'ab 12/7/2024 14:42'!testMultiProcProgram	| errors |	errors := BigTalkSemanticAnalyzer analyze: self multiProcProgram.	self deny: errors isEmpty.	errors inspect.! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'running' stamp: 'ab 12/7/2024 15:34'!testNano	| errors |	errors := BigTalkSemanticAnalyzer analyze: self nanoProgram.	self deny: errors isEmpty.! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'running' stamp: 'ab 12/7/2024 15:26'!testUndeclaredProcProgram	| errors |	errors := BigTalkSemanticAnalyzer analyze: self undeclaredProcProgram.	self deny: errors isEmpty.	errors inspect.! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'running' stamp: 'ab 12/7/2024 15:24'!testUndeclaredVariablesProgram	| errors |	errors := BigTalkSemanticAnalyzer analyze: self undeclaredVariablesProgram.	self deny: errors isEmpty.	errors inspect.! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'running' stamp: 'ab 12/7/2024 15:50'!testfactorialProgram	| errors |	errors := BigTalkSemanticAnalyzer analyze: self factorialProgram.	self assert: errors isEmpty.	errors inspect.! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'running' stamp: 'ab 12/7/2024 17:15'!testfactorialProgramBadArgs	| errors |	errors := BigTalkSemanticAnalyzer analyze: self factorialProgramBadArgs.	self deny: errors isEmpty.	errors inspect.! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'accessing' stamp: 'ab 12/7/2024 16:28'!badArithmeticProgram^'programvariables	msg : stringdo	msg <- msg + 1'! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'accessing' stamp: 'ab 12/7/2024 15:07'!badFunctionCall	^'programvariables	msg : stringmethods	function factorial(n:integer) : integer	do		if n = 0 then			factorial <- 1		else			factorial <- n * factorial( n - 1 )		function factorial(n:integer) : integer	do		if n = 0 then			factorial <- 1		else			factorial <- n * factorial( n - 1 )do	[msg <- "Factorial 5 is "	writeString msg	writeInteger factorial(5)	writeLine]'! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'accessing' stamp: 'ab 12/7/2024 15:56'!badIf^'programvariables	msg : stringdo	if msg then		writeLine'! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'accessing' stamp: 'ab 12/7/2024 15:09'!badVariablesProgram	^'program	variables		answer : integer		msg : string		answer : string		isIt : boolean	do		[answer <- 42		writeInteger answer		writeLine		msg <- "Hello, World!!"		writeString msg		writeLine		isIt <- true		writeBoolean isIt		writeLine]'! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'accessing' stamp: 'ab 12/7/2024 16:24'!badWhile^'programvariables	msg : stringdo	while msg do		writeLine'! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'accessing' stamp: 'ab 12/7/2024 15:39'!factorialProgram	^'program	variables		msg : string	methods		function factorial(n:integer) : integer		do			if n = 0 then				factorial <- 1			else				factorial <- n * factorial( n - 1 )	do		[msg <- "Factorial 5 is "		writeString msg		writeInteger factorial(5)		writeLine]'! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'accessing' stamp: 'ab 12/7/2024 17:14'!factorialProgramBadArgs	^'program	variables		msg : string	methods		function factorial(n:integer) : integer		do			if n = 0 then				factorial <- 1			else				factorial <- n * factorial( n - 1 )	do		[msg <- "Factorial 5 is "		writeString msg		writeInteger factorial(5, "string")		writeLine]'! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'accessing' stamp: 'ab 12/7/2024 15:32'!incorrectType	^'program 	variables		msg : string	do 		msg <- 42'! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'accessing' stamp: 'ab 12/7/2024 14:43'!multiProcProgram	^'program 	variables		msg : string	methods		procedure factorial(n:integer)		do			writeString "hello"					procedure factorial()		do			writeString "hello2"	do		writeString "hello"'! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'accessing' stamp: 'jws 12/2/2024 11:28'!nanoBadProgram	^'program do writeString 42'! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'accessing' stamp: 'jws 12/2/2024 11:18'!nanoProgram	^'program do writeString "Hello, World!!"'! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'accessing' stamp: 'ab 12/7/2024 15:26'!undeclaredProcProgram	^'program 	variables		msg : string	do 		factorial()'! !!BigTalkSemanticAnalyzerTestCase methodsFor: 'accessing' stamp: 'ab 12/7/2024 15:25'!undeclaredVariablesProgram	^'program	do		[answer <- 42]'! !